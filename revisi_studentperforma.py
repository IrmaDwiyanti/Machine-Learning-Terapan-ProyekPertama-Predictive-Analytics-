# -*- coding: utf-8 -*-
"""Revisi_StudentPerforma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vYjlL8A_ObWgSS4rTlxkbKn1mXwl4uV-

# Import Libray
"""

# 1️⃣ Impor Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, r2_score, ConfusionMatrixDisplay
from google.colab import drive

"""Mengimpor library yang dibutuhkan untuk pengembangan proyek ini seperti manipulasi data (pandas, numpy),visualisasi (seaborn, matplotlib), machine learning (sklearn)

# Data Loading

Pada tahap, kita akan mengambil memanggil dataset yang telah di upload pada Google Drive
"""

#akses drive
drive.mount('/content/drive', force_remount=True)

df = pd.read_csv("/content/drive/MyDrive/DBS/Submission_TerapanPertama/StudentsPerformance.csv")

"""Selanjutnya, kita melihat isi dari dataset secara sekilas dengan .head() dan ukuran dari dataset dengan .shape"""

print(df.shape)
df.head(100)

"""Menampilkan Informasi jumlah baris dan kolom"""

print("Jumlah baris dan kolom:", df.shape)

"""melihat statistik deskriptif dari seluruh kolom dalam DataFrame (baik numerik maupun kategorikal), berikut ini"""

print(df.describe(include='all'))

"""# Exploratory Data Analysis

Selanjutnya, kita akan menampilkan informasi dataset siswa
"""

df.info()

"""**Menangani Missing Value**

Pada tahap ini kita akan mengecek data yang tidak valid pada dataset
"""

pd.DataFrame({'Jumlah missing valueg':df.isna().sum()})

"""Dari hasil yang ditampilkan, data tidak memiliki nilai kosong (null) pada setiap kolom dataset

**Menangani Dupliaksi**
"""

print("\nJumlah data duplikat:", df.duplicated().sum())

"""Hasil yang ditampilkan adalah 0, dengan demikian data tidak ada yang ganda (dupikat)

**Univariate Analysis**
"""

# PREPROCESSING & ENCODING - Move this block up

# Menambahkan kolom rata-rata dan total skor
df["average_score"] = df[['math score', 'reading score', 'writing score']].mean(axis=1)
# Mengkategorikan prestasi berdasarkan nilai rata-rata
df["prestasi"] = df["average_score"].apply(lambda x: 1 if x >= 70 else 0)
df['total_score'] = df['math score'] + df['reading score'] + df['writing score']

# Encoding kolom kategorikal (Keep this here or move it as needed,
# but ensure 'prestasi' is created before being used in EDA)
label_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']
le = LabelEncoder()
for col in label_cols:
    df[col] = le.fit_transform(df[col])




# Pisahkan kolom numerik dan kategorikal
num_cols = ['math score', 'reading score', 'writing score', 'average_score'] # Removed 'total_score'
cat_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']

# Visualisasi distribusi target 'prestasi' - This should now work
plt.figure(figsize=(6, 4))
sns.countplot(x='prestasi', data=df)
plt.title('Distribusi Prestasi Siswa (Target)')
plt.xlabel('Prestasi (0 = Tidak, 1 = Berprestasi)')
plt.ylabel('Jumlah')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Distribusi fitur numerik
for col in num_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi {col}')
    plt.xlabel(col)
    plt.ylabel('Frekuensi')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Distribusi fitur kategorikal
for col in cat_cols:
    plt.figure(figsize=(7, 4))
    sns.countplot(y=col, data=df, order=df[col].value_counts().index)
    plt.title(f'Distribusi {col}')
    plt.xlabel('Jumlah')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()

# ... rest of your code

"""**Multivariate Analysis**

Pada bagian ini, akan ditunjukan hubungan antara dua variabel biasa disebut sebagai bivariate EDA. Selanjutnya, kita akan melakukan analisis data pada fitur kategori dan numerik
"""

# Korelasi antar fitur numerik
plt.figure(figsize=(10, 7))
corr_matrix = df[num_cols + ['prestasi']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Heatmap Korelasi Fitur Numerik")
plt.tight_layout()
plt.show()

# Boxplot nilai numerik terhadap label prestasi
for col in num_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x='prestasi', y=col, data=df)
    plt.title(f'Distribusi {col} terhadap Prestasi')
    plt.xlabel('Prestasi (0 = Tidak, 1 = Berprestasi)')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()

# Proporsi prestasi berdasarkan fitur kategorikal
for col in cat_cols:
    cross_tab = pd.crosstab(df[col], df['prestasi'], normalize='index')
    cross_tab.plot(kind='bar', stacked=True, figsize=(7, 4), colormap='viridis')
    plt.title(f'Proporsi Prestasi berdasarkan {col}')
    plt.xlabel(col)
    plt.ylabel('Proporsi')
    plt.legend(title='Prestasi', labels=['Tidak', 'Berprestasi'])
    plt.tight_layout()
    plt.show()

"""# PREPROCESSING & ENCODING"""

# 1. Label Encoding untuk fitur kategorikal
categorical_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# 2. Membuat target untuk klasifikasi (misalnya, 'prestasi' berdasarkan nilai rata-rata)
df['average_score'] = (df['math score'] + df['reading score'] + df['writing score']) / 3
df['prestasi'] = df['average_score'].apply(lambda x: 1 if x >= 70 else 0)

# 3. Membuat target untuk regresi (skor matematika dan total skor)
y_reg_math = df['math score']
X_reg_math = df.drop(['math score', 'reading score', 'writing score', 'average_score', 'prestasi'], axis=1)

df['total_score'] = df['math score'] + df['reading score'] + df['writing score']
y_reg_total = df['total_score']
X_reg_total = df.drop(['math score', 'reading score', 'writing score', 'average_score', 'prestasi', 'total_score'], axis=1)


y_class = df['prestasi']
X_class = df.drop(['average_score', 'prestasi', 'math score', 'reading score', 'writing score', 'total_score'], axis=1)  # Fitur untuk klasifikasi

# Pembagian Data
X_train, X_test, y_train, y_test = train_test_split(X_class, y_class, test_size=0.2, random_state=42) # Klasifikasi
X_train_reg_math, X_test_reg_math, y_train_reg_math, y_test_reg_math = train_test_split(X_reg_math, y_reg_math, test_size=0.2, random_state=42) # Regresi Math
X_train_reg_total, X_test_reg_total, y_train_reg_total, y_test_reg_total = train_test_split(X_reg_total, y_reg_total, test_size=0.2, random_state=42) # Regresi Total

"""# MODEL DEPLOYMENT DAN EVALUASI

**🎯Problem 1: Klasifikasi Prestasi Siswa**

**Menggunakan RandomForestClassifier**

Langkah 1 :

kita melatih model klasifikasi menggunakan Random Forest dengan memanggil fungsi RandomForestClassifier. Parameter yang digunakan:

- n_estimators=100: Jumlah pohon keputusan dalam model. Semakin banyak, hasil prediksi biasanya lebih stabil.

- max_depth=10: Batas kedalaman pohon untuk mencegah overfitting.

- random_state=42: Agar hasil pelatihan konsisten setiap kali dijalankan.

Model dilatih dengan data latih (X_train, y_train), lalu dilakukan prediksi pada data uji (X_test). Evaluasi dilakukan menggunakan akurasi, classification report, dan confusion matrix untuk melihat performa klasifikasi.
"""

# Inisialisasi dan melatih model Random Forest
rf_classifier = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)  # Penjelasan parameter
rf_classifier.fit(X_train, y_train)

"""Langkah 2 :

Lalu, model yang sudah dilatih digunakan untuk memprediksi kelas (0 atau 1) pada data uji (X_test).

Hasilnya disimpan dalam y_pred_class.
"""

# Melakukan prediksi
y_pred_class = rf_classifier.predict(X_test)

"""Langkah ke 3

- accuracy_score(): Mengukur seberapa sering model memprediksi dengan benar.

- Akurasi = (jumlah prediksi benar) / (total prediksi)

- Mengalikan accuracy dengan 100 untuk mengkonversi ke persentase

- Menggunakan format .2f untuk menampilkan 2 angka desimal

- Menambahkan tanda % di akhir output

**Evaluasi Model**
"""

# Evaluasi model klasifikasi
accuracy = accuracy_score(y_test, y_pred_class)
print(f"Akurasi Klasifikasi: {accuracy*100:.2f}%")

"""Dari hasil yang diperoleh menunjukan model yang dibangun menggunakan algoritma RandomForestClassifier memperoleh akurasi (78.07%)

Langkah ke 4:

Menampilkan metrik evaluasi:

- Precision: Proporsi prediksi positif yang benar.

- Recall: Proporsi kasus positif yang berhasil ditemukan oleh model.

- F1-Score: Harmonik rata-rata precision dan recall.

- Support: Jumlah aktual dari tiap kelas.
"""

# Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred_class))

# Confusion Matrix
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_class)
plt.title('Confusion Matrix - Klasifikasi Prestasi')
plt.show()

"""TN (True Negative): Model benar memprediksi siswa tidak berprestasi.

TP (True Positive): Model benar memprediksi siswa berprestasi.

FP dan FN: Kesalahan klasifikasi.

**🎯 Problem 2: Problem 2: Prediksi Skor Matematika dengan Random Forest Regressor**

**Menggunakan RandomForestRegressor**

Langkah 1: Inisialisasi Model

Menggunakan algoritma Random Forest Regressor untuk memprediksi nilai kontinu (skor matematika).

Parameter yang digunakan:

- n_estimators=100: Jumlah pohon dalam hutan.

- max_depth=10: Kedalaman maksimum setiap pohon untuk mencegah overfitting.

- random_state=42: Untuk memastikan hasil konsisten setiap kali dijalankan.
"""

rf_regressor = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42) # Inisialisasi model

"""Langkah 2: Melatih Model

Model dilatih menggunakan data latih:

- X_train_reg_math: Fitur input.

- y_train_reg_math: Nilai target (skor matematika).
"""

rf_regressor.fit(X_train_reg_math, y_train_reg_math) # Melatih model

"""Langkah 3: Melakukan Prediksi

Model yang sudah dilatih digunakan untuk memprediksi nilai skor matematika pada data uji (X_test_reg_math).
"""

y_pred_reg_math = rf_regressor.predict(X_test_reg_math) # Melakukan prediksi

"""Langkah 4: Evaluasi Model

Evaluasi model dilakukan dengan dua metrik:

- RMSE (Root Mean Squared Error): Mengukur rata-rata kesalahan prediksi.

- R² Score: Menunjukkan seberapa baik model menjelaskan variasi data.

**Evaluasi Model**
"""

# Evaluasi model regresi
rmse_math = np.sqrt(mean_squared_error(y_test_reg_math, y_pred_reg_math))
r2_math = r2_score(y_test_reg_math, y_pred_reg_math)

print(f"\nRMSE (Math Score): {rmse_math:.2f}")
print(f"R² Score (Math Score): {r2_math:.2f}")

"""Dari hasil di atas menunjukkan bahwa:

RMSE (Math Score): 4.47

R² Score (Math Score): 0.92

Penjelasan Model Regresi (Math Score):
- Algoritma: Random Forest untuk regresi bekerja dengan cara yang sama seperti klasifikasi, tetapi memprediksi nilai kontinu (skor) sebagai rata-rata prediksi semua tree.
- Parameter (sama seperti klasifikasi):
  - n_estimators (100): Jumlah tree.
  - max_depth (10): Kedalaman tree.
  - random_state (42): Untuk reproducibility.

**🎯 Problem 3: Estimasi Total Skor dengan Linear Regression**

Langkah 1: Inisialisasi Model

Menggunakan algoritma Linear Regression yang mencari hubungan linier antara fitur dan target.

Model ini cocok untuk kasus sederhana dengan data yang relatif tidak kompleks.
"""

linear_regressor = LinearRegression() # Inisialisasi model

"""Langkah 2: Melatih Model

Model dilatih menggunakan data pelatihan:

- X_train_reg_total: Data fitur (misalnya skor-skor individual).

- y_train_reg_total: Target atau skor total.


"""

linear_regressor.fit(X_train_reg_total, y_train_reg_total) # Melatih model

"""Langkah 3: Melakukan Prediksi

Model digunakan untuk memprediksi nilai total skor berdasarkan data uji (X_test_reg_total).


"""

y_pred_total = linear_regressor.predict(X_test_reg_total) # Melakukan prediksi

"""Langkah 4: Evaluasi Model

Menggunakan dua metrik evaluasi:

- RMSE (Root Mean Squared Error): Mengukur seberapa jauh prediksi dari nilai sebenarnya.

- R² Score: Menunjukkan seberapa besar variasi target yang dapat dijelaskan oleh model.

**Evaluasi Model**
"""

# Evaluasi model regresi
rmse_total = np.sqrt(mean_squared_error(y_test_reg_total, y_pred_total))
r2_total = r2_score(y_test_reg_total, y_pred_total)

print(f"\nRMSE (Total Score): {rmse_total:.2f}")
print(f"R² Score (Total Score): {r2_total:.2f}")

"""Dari hasil di atas menunjukkan bahwa :

RMSE (Total Score): 41.07

R² Score (Total Score): 0.13

Penjelasan Model Regresi (Total Score):
- Algoritma: Linear Regression mencari hubungan linier antara fitur dan target. Ini mencoba menemukan garis terbaik yang meminimalkan selisih antara prediksi dan nilai sebenarnya.
- Parameter: Linear Regression memiliki sedikit parameter utama. Yang penting adalah regularisasi (misalnya, Ridge atau Lasso) untuk mencegah overfitting, tetapi di sini kita menggunakan versi sederhana tanpa regularisasi.
  - Tanpa Regularisasi: Model ini cocok karena jumlah fitur relatif kecil.

Melihat tabel   Model           | Accuracy/Precision (Avg) | RMSE  | R² Score
"""

from tabulate import tabulate
import pandas as pd

# Data evaluasi terbaru dengan semua nilai yang sesuai
eval_data = {
    "Problem": ["Klasifikasi Prestasi",
                "Prediksi Skor Matematika",
                "Estimasi Total Skor"],
    "Model": ["Random Forest Classifier",
              "Random Forest Regressor",
              "Linear Regression"],
    "Accuracy/Precision (Avg)": [0.59,
                                 "-",
                                 "-"],
    "RMSE": ["-",
             4.47,
             41.07],
    "R² Score": ["-",
                 0.92,
                 0.13]
}

# Membuat DataFrame
eval_df = pd.DataFrame(eval_data)

# Menampilkan tabel dengan format yang rapih
print(tabulate(eval_df, headers='keys', tablefmt='pretty', showindex=False))