# -*- coding: utf-8 -*-
"""StudentPerforma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EEwGyel-W6OCJ4fE-4UO6_RfToFd3Sl_

# Import Libray
"""

# 1️⃣ Impor Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, r2_score, ConfusionMatrixDisplay
from google.colab import drive

"""Mengimpor library yang dibutuhkan untuk pengembangan proyek ini seperti manipulasi data (pandas, numpy),visualisasi (seaborn, matplotlib), machine learning (sklearn)

# Data Loading

Pada tahap, kita akan mengambil memanggil dataset yang telah di upload pada Google Drive
"""

#akses drive
drive.mount('/content/drive', force_remount=True)

df = pd.read_csv("/content/drive/MyDrive/DBS/Submission_TerapanPertama/StudentsPerformance.csv")

"""Selanjutnya, kita melihat isi dari dataset secara sekilas dengan .head() dan ukuran dari dataset dengan .shape"""

print(df.shape)
df.head(100)

"""Menampilkan Informasi jumlah baris dan kolom"""

print("Jumlah baris dan kolom:", df.shape)

"""melihat statistik deskriptif dari seluruh kolom dalam DataFrame (baik numerik maupun kategorikal), berikut ini"""

print(df.describe(include='all'))

"""# Exploratory Data Analysis

Selanjutnya, kita akan menampilkan informasi dataset siswa
"""

df.info()

"""**Menangani Missing Value**

Pada tahap ini kita akan mengecek data yang tidak valid pada dataset
"""

pd.DataFrame({'Jumlah missing valueg':df.isna().sum()})

"""Dari hasil yang ditampilkan, data tidak memiliki nilai kosong (null) pada setiap kolom dataset

**Menangani Dupliaksi**
"""

print("\nJumlah data duplikat:", df.duplicated().sum())

"""Hasil yang ditampilkan adalah 0, dengan demikian data tidak ada yang ganda (dupikat)

**Univariate Analysis**
"""

# Pisahkan kolom numerik dan kategorikal
num_cols = ['math score', 'reading score', 'writing score', 'average_score'] # Removed 'total_score'
cat_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']

# Visualisasi distribusi target 'prestasi'
plt.figure(figsize=(6, 4))
sns.countplot(x='prestasi', data=df)
plt.title('Distribusi Prestasi Siswa (Target)')
plt.xlabel('Prestasi (0 = Tidak, 1 = Berprestasi)')
plt.ylabel('Jumlah')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Distribusi fitur numerik
for col in num_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi {col}')
    plt.xlabel(col)
    plt.ylabel('Frekuensi')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Distribusi fitur kategorikal
for col in cat_cols:
    plt.figure(figsize=(7, 4))
    sns.countplot(y=col, data=df, order=df[col].value_counts().index)
    plt.title(f'Distribusi {col}')
    plt.xlabel('Jumlah')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()

"""**Multivariate Analysis**

Pada bagian ini, akan ditunjukan hubungan antara dua variabel biasa disebut sebagai bivariate EDA. Selanjutnya, kita akan melakukan analisis data pada fitur kategori dan numerik
"""

# Korelasi antar fitur numerik
plt.figure(figsize=(10, 7))
corr_matrix = df[num_cols + ['prestasi']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Heatmap Korelasi Fitur Numerik")
plt.tight_layout()
plt.show()

# Boxplot nilai numerik terhadap label prestasi
for col in num_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x='prestasi', y=col, data=df)
    plt.title(f'Distribusi {col} terhadap Prestasi')
    plt.xlabel('Prestasi (0 = Tidak, 1 = Berprestasi)')
    plt.ylabel(col)
    plt.tight_layout()
    plt.show()

# Proporsi prestasi berdasarkan fitur kategorikal
for col in cat_cols:
    cross_tab = pd.crosstab(df[col], df['prestasi'], normalize='index')
    cross_tab.plot(kind='bar', stacked=True, figsize=(7, 4), colormap='viridis')
    plt.title(f'Proporsi Prestasi berdasarkan {col}')
    plt.xlabel(col)
    plt.ylabel('Proporsi')
    plt.legend(title='Prestasi', labels=['Tidak', 'Berprestasi'])
    plt.tight_layout()
    plt.show()

"""# PREPROCESSING & ENCODING"""

df["average_score"] = df[['math score', 'reading score', 'writing score']].mean(axis=1)
df["prestasi"] = df["average_score"].apply(lambda x: 1 if x >= 70 else 0)
df['total_score'] = df['math score'] + df['reading score'] + df['writing score']

# Encoding kolom kategorikal
label_cols = ['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']
le = LabelEncoder()
for col in label_cols:
    df[col] = le.fit_transform(df[col])

"""- Menambahkan kolom rata-rata dan total skor
- Mengkategorikan prestasi berdasarkan nilai rata-rata
- Melakukan label encoding untuk fitur kategorikal

# MODEL DEPLOYMENT

**Menggunakan algoritma random forest**
"""

# 🧠 Problem 1: Klasifikasi Prestasi Siswa
X_clf = df.drop(columns=['math score', 'reading score', 'writing score', 'average_score', 'total_score', 'prestasi'])
y_clf = df['prestasi']
X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X_clf, y_clf, test_size=0.2, random_state=42)
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_c, y_train_c)
y_pred_c = clf.predict(X_test_c)
print("Akurasi Klasifikasi Prestasi:", accuracy_score(y_test_c, y_pred_c))
ConfusionMatrixDisplay.from_estimator(clf, X_test_c, y_test_c)
plt.title("Confusion Matrix Prestasi")
plt.show()

"""- Model: Random Forest Classifier
- Target: prestasi (1 = berprestasi, 0 = tidak)
- Evaluasi: Akurasi & confusion matrix
"""

# 📊 Problem 2: Prediksi Nilai Matematika
X_math = df.drop(columns=['math score', 'average_score', 'prestasi', 'total_score'])
y_math = df['math score']
X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(X_math, y_math, test_size=0.2, random_state=42)
reg_math = RandomForestRegressor(random_state=42)
reg_math.fit(X_train_m, y_train_m)
y_pred_m = reg_math.predict(X_test_m)

print("RMSE Math:", mean_squared_error(y_test_m, y_pred_m) ** 0.5)
print("R2 Math:", r2_score(y_test_m, y_pred_m))

toleransi = 10
akurasi_mendekati = np.mean(np.abs(y_test_m - y_pred_m) <= toleransi)
print("Akurasi (Prediksi Mendekati ±10): {:.2f}%".format(akurasi_mendekati * 100))

"""- Model: Random Forest Regressor
- Target: math score
- Evaluasi: RMSE & R^2 Score

**Linear Regression**
"""

X_total = df[label_cols]  # hanya demografi & persiapan tes
y_total = df['total_score']
X_train_t, X_test_t, y_train_t, y_test_t = train_test_split(X_total, y_total, test_size=0.2, random_state=42)
reg_total = LinearRegression()
reg_total.fit(X_train_t, y_train_t)
y_pred_t = reg_total.predict(X_test_t)

print("RMSE Total Score:", mean_squared_error(y_test_t, y_pred_t)**0.5) # Calculate RMSE by taking the square root of MSE
print("R2 Total Score:", r2_score(y_test_t, y_pred_t))

# Hitung MAPE
mape_total = np.mean(np.abs((y_test_t - y_pred_t) / y_test_t)) * 100
print("MAPE Total Score: {:.2f}%".format(mape_total))

# Hitung akurasi prediksi mendekati benar (misalnya toleransi ±15 poin)
toleransi = 15
akurasi_mendekati_total = np.mean(np.abs(y_test_t - y_pred_t) <= toleransi)
print("Akurasi (Prediksi Mendekati ±15): {:.2f}%".format(akurasi_mendekati_total * 100))

"""- Model: Linear Regression
- Target: total_score
- Evaluasi: RMSE & R^2 Score
- Input: hanya faktor demografis dan status persiapan ujian

untuk menyertakan metrik akurasi tambahan:
"""

# Tambahan Evaluasi: Akurasi dalam toleransi ±15 poin
toleransi = 15
akurasi_mendekati = np.mean(np.abs(y_test_t - y_pred_t) <= toleransi)
print("Akurasi (Toleransi ±15): {:.2f}%".format(akurasi_mendekati * 100))

# MAPE (Mean Absolute Percentage Error)
mape = np.mean(np.abs((y_test_t - y_pred_t) / y_test_t)) * 100
print("MAPE Total Score: {:.2f}%".format(mape))

"""### 🧪 Evaluasi Model

Untuk mengevaluasi model pada masing-masing problem, digunakan metrik sebagai berikut:

- **Klasifikasi (Problem 1)**:
  - `Accuracy Score`: untuk mengukur seberapa banyak prediksi benar dibanding total data.
  - `Confusion Matrix`: untuk melihat detail prediksi benar dan salah dari tiap kelas.

- **Regresi (Problem 2 & 3)**:
  - `RMSE (Root Mean Squared Error)`: menyatakan besar rata-rata kesalahan prediksi dalam satuan nilai skor.
  - `R² Score`: menunjukkan proporsi variansi target yang dijelaskan oleh fitur.
  - `MAPE`: presentase kesalahan rata-rata relatif (semakin kecil semakin baik).
  - `Akurasi Toleransi ±15`: mengukur seberapa banyak prediksi berada dalam rentang ±15 poin dari nilai sebenarnya.

"""